{
    "docs": [
        {
            "location": "/",
            "text": "Maana Knowledge Platform\n\n\nGuides\n\n\n\n\nUser\n\n\nDeveloper\n\n\nAdministrator",
            "title": "Home"
        },
        {
            "location": "/#maana-knowledge-platform",
            "text": "",
            "title": "Maana Knowledge Platform"
        },
        {
            "location": "/#guides",
            "text": "User  Developer  Administrator",
            "title": "Guides"
        },
        {
            "location": "/user/",
            "text": "User Guide\n\n\nWhat is Maana?\n\n\nKnowledge Portal",
            "title": "User Guide"
        },
        {
            "location": "/user/#user-guide",
            "text": "",
            "title": "User Guide"
        },
        {
            "location": "/user/#what-is-maana",
            "text": "",
            "title": "What is Maana?"
        },
        {
            "location": "/user/#knowledge-portal",
            "text": "",
            "title": "Knowledge Portal"
        },
        {
            "location": "/developer/",
            "text": "Research and Development : Developer Guide  \n\n\n\n\nResearch and Development\n\n\n\n\nResearch and Development : Developer Guide\n\n\nCreated by Marius Marcu, last modified by Donald Thompson on Jul 12, 2018\n\n\nOld Word Doc: \nOLD Developer Guide OLD\n\n\nDocument name\n\n\nAudience\n\n\nDescription\n\n\nKnowledge Technology Development Guide\n\n\nSolution Engineers and Data Scientists\n\n\ndetails the architecture of the platform, how to build a full solution and/or reusable components\n\n\nTable of Contents\n\n\n/\n<![CDATA[\n/ div.rbtoc1532523907698 {padding: 0px;} div.rbtoc1532523907698 ul {list-style: disc;margin-left: 0px;} div.rbtoc1532523907698 li {margin-left: 0px;padding-left: 0px;} /\n]]>\n/\n\n\n\n\nTable of Contents\n\n\nIntroduction\n\n\nGraphQL and Microservices\n\n\nGraphQL Learning Resources\n\n\n\n\n\n\nKnowledge Microservices and Bots\n\n\nDevelopment Stages\n\n\nStage: Design\n\n\nStage: Local Service (Standalone)\n\n\nStage: Local Service (Maana)\n\n\nStage: Unmanaged Service\n\n\nStage: Managed Service\n\n\n\n\n\n\nDebugging a Knowledge Microservice\n\n\nThe BotAction Protocol\n\n\n\n\n\n\nKnowledge Applications\n\n\nDevelopment Environments\n\n\nVisual Studio Code\n\n\nCommand Line\n\n\nRecommended Plugins\n\n\nSettings\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\nThe Maana platform is built from a network of \nGraphQL\n-based \nmicroservices\n. Unlike pure client-server or n-tier architectures, Maana's microservices act as peers in an asynchronous and loosely-coupled arrangement that promotes independent scaling and extensibility. These services provide identity and access controls, graph persistence, search, machine learning, and natural language processing. Ultimately, these services provide reasoning capabilities to Knowledge Applications, which help solve domain-specific problems and support optimal decision-making capable of learning over time.\n\n\nThis guide is intended for Solution Developers and Data Scientists and describes how to develop such services (aka \"bots\") and applications and operationalize them in a production setting.\n\n\nGraphQL and Microservices\n\n\nAt the core of any Maana solution sits a Knowledge Graph, which consists of \nconcepts\n and \nproperties\n, \ninstances\n and \nvalues\n, and \nrelations\n and \nlinks\n. For example, consider the concept of a \nContainerShip\n with properties \nname\n, \nlength\n, \nposition\n, etc. A specific instance (entity) has values for each of the properties, such as the Maersk Viking with a length of \n400 meters\n, ... Such properties can be \nscalar\n (e.g., numbers, strings, dates) or might refer to other concepts/instances, e.g., ships \nhold Cargo\n. In some cases, property values for an instance are simply stored, since they don't change (often). In other cases, they are dynamically computed, such as a ship's \nweight\n (which depends on its cargo) or its \ncurrent position\n (which requires getting a GPS reading).\n\n\nGraphQL\n is a data query language created by Facebook and open-sourced in 2015 as an alternative to REST interfaces. Maana uses GraphQL to represent and expose its Knowledge Graph\n\n\nUnlike a traditional \ngraph database\n, Maana incorporate arbitrary computation (through custom GraphQL resolvers) and distributes the graph into subgraphs managed by different \nmicroservices\n, optionally with their own dedicated persistence mechanism.\n\n\nWhile this approach allows for flexibility, it places more responsibility on the microservices to provide their own storage. To address this, Maana proposes an explicit split between the data models (i.e., GraphQL type definitions) that a service uses and its operations (i.e., GraphQL resolvers). Maana will generate the appropriate managed service for such models using \nKindDB\n, Prisma, neo4j, ... The solution developer, then, only provides the logic they care about and let the system take care of all the CRUD/ORM-like operations on the data.\n\n\nThe \nComputational Knowledge Graph (CKG)\n, itself a microservice, provides automatic persistence, boilerplate queries and mutations, and service orchestration capabilities. Taken together, these service allow the solution developer to focus on \ndesigning GraphQL schemas\n and implementing \ncomputational resolvers\n only where needed.\n\n\nGraphQL Learning Resources\n\n\n\n\nHow to GraphQL\n\n\n\n\nKnowledge Microservices and Bots\n\n\nA \nGraphQL service\n (endpoint) consists of:\n\n\n\n\ntypes\n\n\nqueries\n\n\nmutations\n\n\nevents\n (pub/sub)\n\n\n\n\nA \nKnowledge Microservice\n is a GraphQL service that also includes:\n\n\n\n\nauthenticated access\n\n\nclient/server boilerplate\n\n\nreliable messaging using RabbitMQ\n\n\nlifecycle management (info, register, deregister)\n\n\nDocker containerization and automatic scaling/load balancing\n\n\n\n\nA \nBot\n is a Knowledge Microservice that provides specialized queries and mutations that perform \nBotActions\n, which allow the bot to provide asynchronous status updates. This enables user interface components to reflect the latest status of \nlong-running operations\n or \nautomatically triggered events\n, e.g., entity recognition, new concept creation, classification.\n\n\nAll \nKinds\n (concepts, types) are associated with a service. This service is said to \nprovide\n the (entities of) the Kind. Many Kinds are purely extensional (i.e., data) and do not have custom CRUD behavior. Such Kinds are automatically managed by CKG and stored in the KindDB, where it will be indexed for efficient search and querying (including sophisticated entity cooccurrences).\n\n\nServices also \ndepend\n on \nexisting\n \nKinds\n and \nqueries\n, \nmutations\n, and \nevents\n. The services that provide these Kinds (which may be fully managed by CKG/KindDB) can be \nimported\n into a new service purely through GraphQL and specified in a \nmanifest\n that is used to \ncreate and register\n a new service. This process will result in a \nmerged schema\n on a \nservice-specific endpoint\n that the newly developed service uses for \nall\n Maana GraphQL communication (non-pub/sub).\n\n\nDevelopment Stages\n\n\n\n\nDesign:\n focus on GraphQL types (\nKinds\n, \nProperties\n, \nRelations\n), queries and mutations (often based on \nProblem Questions\n), and events (consumed and produced)\n\n\nLocal Service (Standalone)\n: choose programming language, identify dependencies (libraries, existing services and domain models), core logic to satisfy GraphQL interface contract\n\n\nLocal Service\n (\nMaana)\n: continue local development, connecting to a \nremote\n Maana deployment (e,g, Azure) to consume and produce GraphQL other services via your \ncustom endpoint\n\n\nUnmanaged Service\n: deploy your service via your own means (e.g., Heroku), but make it accessible to Maana to communicate to for call and event dispatching\n\n\nManaged Service\n: Dockerize your service and make it available in a registry that Maana has access to (e.g., Azure)\n\n\n\n\nThe following sections will elaborate on each of these stages.\n\n\nStage: Design\n\n\nAt this point, the overall problem to be solved has been analyzed and a \ndomain model\n and set of \ndecomposed\n \nproblem questions\n has been generated, some discussion of \nentity sources\n and \ndata science\n has taken place, and it is now time to code one or more \nKnowledge Microservices\n to provide some new \nconcepts\n (types, Kinds) along with \nqueries\n, \nmutations\n, and \nevents\n that involve them.\n\n\nFocus on the GraphQL\n. This is the entire description of and interface to the \nworld\n for the Knowledge service/bot. Define the \nGraphQL SDL\n a file, e.g., `model.gql`, including custom queries, mutations, and publications/subscriptions. Plan the custom \nresolvers\n, i.e., what is their \ncore logic\n?\n\n\nStage: Local Service (Standalone)\n\n\nWith at least an initial design complete, the following implementation decisions must be made:\n\n\n\n\nAre there existing Kinds and Services that can be reused?\n\n\nAre their existing code libraries or ML models that can be reused?\n\n\nWhat is the best programming language for this task?\n\n\nIs there reference data or domain data?\n\n\nAre there long-running tasks?\n\n\nWhat are the scale, performance, and capacity factors?\n\n\n\n\nOnce a programming language has been chosen, then an \nexisting project template\n can be used to scaffold a new Knowledge Microservice/Bot in Scala/JVM, Python, JavaScript, ...\n\n\nDevelopment of core logic or machine learning solution happens as it normally would, writing, testing, and debugging code or improving model accuracy.\n\n\nThe Knowledge Service is a standard GraphQL endpoint, so it can be run and tested within the development environment and used via \nMaana CLI\n, its own exposed \nGraphiQL\n, a standalone \nGraphQL Playground\n, etc.\n\n\nDependent types and services are \nimported\n into the service \nmodel\n using a modified version of a technique from \ngraphql-import\n:\n\n\n# import File, Url, MimeType from io.maana.core @PASSTHRU\n\ninput CrawlOptions {\n  url: Url\n  ...\n}\n\n\n...\n\n\ntype Mutation {\n  crawl(input: CrawlOptions): BotAction\n  ...\n}\n\n\n\n\nStage: Local Service (Maana)\n\n\nIn the previous stage, it is likely that various calls/services were stubbed or mocked because they required accessing a Maana cluster. It is now time to interact with a Maana deployment, typically one dedicated to development.\n\n\nCommunication to a Maana system requires the use of authentication. This is configured differently, based on the language/framework being used. Refer to the project template documentation used to scaffold the Knowledge service project.\n\n\nThe service being development must be registered with Maana. This is typically done programmatically using the Maana CLI by specifying a \nmanifest\n that describes the service and its dependencies. For example:\n\n\n{\n  id: \"io.maana.azure.crawler\",\n  name: \"Maana Azure Storage Crawler Service\",\n  dockerRegistry: null,\n  hostedUrl: null,\n}\n\n\n\n\nThe result of registering a new service with Maana is that CKG will generate a dedicated service endpoint for the new service, e.g., \nhttps://knowledge.acme.com/service/io.maana.azure.crawler:7331.\n This enables the standalone service to communicate to Maana, but does not allow Maana to dispatch calls to the standalone service due to network connectivity restrictions. (This will be overcome in the next stages.)\n\n\nThe full GraphQL schema for a service manifest is:\n\n\n# from io.maana.system\ntype ServiceManifest {\n  id: ID!\n  name: String\n  description: Text\n  registeredOn: DateTime\n  registeredBy: User\n  dockerRegistry: Url\n  hostedUrl: Url\n  modelSdl: String\n}\n\n\n\n\nStage: Unmanaged Service\n\n\nWhen it is time to have full participation in the Maana processing network, i.e., having its endpoint services consumed by other services, user interfaces, or automatically based on event subscription, then Maana's CKG must be able to communicate to the service. This means that the service must itself be deployed to a host that is accessible from the Maana cluster, e.g., Heroku, Azure, AWS, on-premise. In this configuration, the service owner is responsible for deploying, monitoring, scaling, securing, etc. the service, since Maana only has knowledge of a GraphQL endpoint URL and the schema it provides.\n\n\nSee the \nDeploy to Heroku tutorial\n.\n\n\nStage: Managed Service\n\n\nMaana can completely manage a \ncontainerized\n Knowledge Microservice/Bot, by specifying a Docker registry that the Maana deployment has access to (e.g., DockerHub, Azure). The following additional information is required when configuring a service to be managed by Maana:\n\n\n\n\nscale stuff ??\n\n\n?? \nAndrey Batyuk\n\n\n\n\nDebugging a Knowledge Microservice\n\n\nAndrey Batyuk\n\n\nThe BotAction Protocol\n\n\nSee \ntechnical design note\n.\n\n\nKnowledge Applications\n\n\nSolution developers can develop knoweldge applications on top of the MAANA knwoledge graph.\n\n\n\n\nwho is the audience for the applications?\n\n\nSME and are looking for answers to specific questions (i.e. Given a ship, a ship route and an omitted port, what re-route options can be considered to minimize trip duration for the loads onboard?)\n\n\n\n\n\n\nwhat type of applications can be developed?\n\n\ncustom web apps, Power BI apps, Tableau, Spotfire? others?\n\n\n\n\n\n\nwhat are the steps to build an application?\n\n\nhow does a developer publish and manage/share/update/delete an app?\n\n\n\n\nDevelopment Environments\n\n\nVisual Studio Code\n\n\nMost people run the \n\"insiders\" edition\n to have access to latest features.\n\n\nCommand Line\n\n\nAdd VS Code to your path so you can invoke it from the command line\n\n\nexport PATH=\"$PATH:/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/bin\"\n\n\n\n\nThe 'code' command will now be available in your terminal.\n\n\nRecommended Plugins\n\n\ncode --install-extension PeterJausovec.vscode-docker\ncode --install-extension christian-kohler.npm-intellisense\ncode --install-extension christian-kohler.path-intellisense\ncode --install-extension dbaeumer.vscode-eslint\ncode --install-extension eamodio.gitlens\ncode --install-extension eg2.vscode-npm-script\ncode --install-extension esbenp.prettier-vscode\ncode --install-extension kumar-harsh.graphql-for-vscode\ncode --install-extension mikestead.dotenv\ncode --install-extension ms-azuretools.vscode-azurefunctions\ncode --install-extension ms-vscode.azure-account\ncode --install-extension msjsdiag.debugger-for-chrome\ncode --install-extension robertohuertasm.vscode-icons\n\n\n\n\nSettings\n\n\nAccess user settings from \"Code Insiders / Preferences / Settings\" and paste the following settings in the \"User Settings\" tab.\n\n\njson\n{\n    \"workbench.iconTheme\": \"vscode-icons\",\n    \"workbench.colorTheme\": \"Default High Contrast\",\n    \"editor.fontFamily\": \"'Roboto Mono Light For Powerline', Menlo, Monaco, 'Courier New', italic\",\n    \"editor.formatOnSave\": true,\n    \"editor.tabSize\": 2,\n    \"editor.insertSpaces\": true,\n    \"eslint.autoFixOnSave\": true,\n    \"files.associations\": {\n        \"*.js\": \"javascriptreact\"\n    },\n    \"explorer.confirmDragAndDrop\": false,\n    \"explorer.confirmDelete\": false,\n    \"window.zoomLevel\": 0,\n    \"gitlens.advanced.messages\": {\n        \"suppressCommitHasNoPreviousCommitWarning\": false,\n        \"suppressCommitNotFoundWarning\": false,\n        \"suppressFileNotUnderSourceControlWarning\": false,\n        \"suppressGitVersionWarning\": false,\n        \"suppressLineUncommittedWarning\": false,\n        \"suppressNoRepositoryWarning\": false,\n        \"suppressUpdateNotice\": false,\n        \"suppressWelcomeNotice\": true\n    },\n    \"search.exclude\": {\n        \"**/node_modules\": true,\n        \"**/.git\": true\n    },\n    \"git.autofetch\": true\n}\n\n\nSome of these are team style, some are personal preference (e.g., workbench.colorTheme).\n\n\nDocument generated by Confluence on Jul 25, 2018 06:05\n\n\nAtlassian",
            "title": "Developer"
        },
        {
            "location": "/developer/#research-and-development-developer-guide",
            "text": "Created by Marius Marcu, last modified by Donald Thompson on Jul 12, 2018  Old Word Doc:  OLD Developer Guide OLD  Document name  Audience  Description  Knowledge Technology Development Guide  Solution Engineers and Data Scientists  details the architecture of the platform, how to build a full solution and/or reusable components",
            "title": "Research and Development : Developer Guide"
        },
        {
            "location": "/developer/#table-of-contents",
            "text": "/ <![CDATA[ / div.rbtoc1532523907698 {padding: 0px;} div.rbtoc1532523907698 ul {list-style: disc;margin-left: 0px;} div.rbtoc1532523907698 li {margin-left: 0px;padding-left: 0px;} / ]]> /   Table of Contents  Introduction  GraphQL and Microservices  GraphQL Learning Resources    Knowledge Microservices and Bots  Development Stages  Stage: Design  Stage: Local Service (Standalone)  Stage: Local Service (Maana)  Stage: Unmanaged Service  Stage: Managed Service    Debugging a Knowledge Microservice  The BotAction Protocol    Knowledge Applications  Development Environments  Visual Studio Code  Command Line  Recommended Plugins  Settings",
            "title": "Table of Contents"
        },
        {
            "location": "/developer/#introduction",
            "text": "The Maana platform is built from a network of  GraphQL -based  microservices . Unlike pure client-server or n-tier architectures, Maana's microservices act as peers in an asynchronous and loosely-coupled arrangement that promotes independent scaling and extensibility. These services provide identity and access controls, graph persistence, search, machine learning, and natural language processing. Ultimately, these services provide reasoning capabilities to Knowledge Applications, which help solve domain-specific problems and support optimal decision-making capable of learning over time.  This guide is intended for Solution Developers and Data Scientists and describes how to develop such services (aka \"bots\") and applications and operationalize them in a production setting.",
            "title": "Introduction"
        },
        {
            "location": "/developer/#graphql-and-microservices",
            "text": "At the core of any Maana solution sits a Knowledge Graph, which consists of  concepts  and  properties ,  instances  and  values , and  relations  and  links . For example, consider the concept of a  ContainerShip  with properties  name ,  length ,  position , etc. A specific instance (entity) has values for each of the properties, such as the Maersk Viking with a length of  400 meters , ... Such properties can be  scalar  (e.g., numbers, strings, dates) or might refer to other concepts/instances, e.g., ships  hold Cargo . In some cases, property values for an instance are simply stored, since they don't change (often). In other cases, they are dynamically computed, such as a ship's  weight  (which depends on its cargo) or its  current position  (which requires getting a GPS reading).  GraphQL  is a data query language created by Facebook and open-sourced in 2015 as an alternative to REST interfaces. Maana uses GraphQL to represent and expose its Knowledge Graph  Unlike a traditional  graph database , Maana incorporate arbitrary computation (through custom GraphQL resolvers) and distributes the graph into subgraphs managed by different  microservices , optionally with their own dedicated persistence mechanism.  While this approach allows for flexibility, it places more responsibility on the microservices to provide their own storage. To address this, Maana proposes an explicit split between the data models (i.e., GraphQL type definitions) that a service uses and its operations (i.e., GraphQL resolvers). Maana will generate the appropriate managed service for such models using  KindDB , Prisma, neo4j, ... The solution developer, then, only provides the logic they care about and let the system take care of all the CRUD/ORM-like operations on the data.  The  Computational Knowledge Graph (CKG) , itself a microservice, provides automatic persistence, boilerplate queries and mutations, and service orchestration capabilities. Taken together, these service allow the solution developer to focus on  designing GraphQL schemas  and implementing  computational resolvers  only where needed.",
            "title": "GraphQL and Microservices"
        },
        {
            "location": "/developer/#graphql-learning-resources",
            "text": "How to GraphQL",
            "title": "GraphQL Learning Resources"
        },
        {
            "location": "/developer/#knowledge-microservices-and-bots",
            "text": "A  GraphQL service  (endpoint) consists of:   types  queries  mutations  events  (pub/sub)   A  Knowledge Microservice  is a GraphQL service that also includes:   authenticated access  client/server boilerplate  reliable messaging using RabbitMQ  lifecycle management (info, register, deregister)  Docker containerization and automatic scaling/load balancing   A  Bot  is a Knowledge Microservice that provides specialized queries and mutations that perform  BotActions , which allow the bot to provide asynchronous status updates. This enables user interface components to reflect the latest status of  long-running operations  or  automatically triggered events , e.g., entity recognition, new concept creation, classification.  All  Kinds  (concepts, types) are associated with a service. This service is said to  provide  the (entities of) the Kind. Many Kinds are purely extensional (i.e., data) and do not have custom CRUD behavior. Such Kinds are automatically managed by CKG and stored in the KindDB, where it will be indexed for efficient search and querying (including sophisticated entity cooccurrences).  Services also  depend  on  existing   Kinds  and  queries ,  mutations , and  events . The services that provide these Kinds (which may be fully managed by CKG/KindDB) can be  imported  into a new service purely through GraphQL and specified in a  manifest  that is used to  create and register  a new service. This process will result in a  merged schema  on a  service-specific endpoint  that the newly developed service uses for  all  Maana GraphQL communication (non-pub/sub).",
            "title": "Knowledge Microservices and Bots"
        },
        {
            "location": "/developer/#development-stages",
            "text": "Design:  focus on GraphQL types ( Kinds ,  Properties ,  Relations ), queries and mutations (often based on  Problem Questions ), and events (consumed and produced)  Local Service (Standalone) : choose programming language, identify dependencies (libraries, existing services and domain models), core logic to satisfy GraphQL interface contract  Local Service  ( Maana) : continue local development, connecting to a  remote  Maana deployment (e,g, Azure) to consume and produce GraphQL other services via your  custom endpoint  Unmanaged Service : deploy your service via your own means (e.g., Heroku), but make it accessible to Maana to communicate to for call and event dispatching  Managed Service : Dockerize your service and make it available in a registry that Maana has access to (e.g., Azure)   The following sections will elaborate on each of these stages.",
            "title": "Development Stages"
        },
        {
            "location": "/developer/#stage-design",
            "text": "At this point, the overall problem to be solved has been analyzed and a  domain model  and set of  decomposed   problem questions  has been generated, some discussion of  entity sources  and  data science  has taken place, and it is now time to code one or more  Knowledge Microservices  to provide some new  concepts  (types, Kinds) along with  queries ,  mutations , and  events  that involve them.  Focus on the GraphQL . This is the entire description of and interface to the  world  for the Knowledge service/bot. Define the  GraphQL SDL  a file, e.g., `model.gql`, including custom queries, mutations, and publications/subscriptions. Plan the custom  resolvers , i.e., what is their  core logic ?",
            "title": "Stage: Design"
        },
        {
            "location": "/developer/#stage-local-service-standalone",
            "text": "With at least an initial design complete, the following implementation decisions must be made:   Are there existing Kinds and Services that can be reused?  Are their existing code libraries or ML models that can be reused?  What is the best programming language for this task?  Is there reference data or domain data?  Are there long-running tasks?  What are the scale, performance, and capacity factors?   Once a programming language has been chosen, then an  existing project template  can be used to scaffold a new Knowledge Microservice/Bot in Scala/JVM, Python, JavaScript, ...  Development of core logic or machine learning solution happens as it normally would, writing, testing, and debugging code or improving model accuracy.  The Knowledge Service is a standard GraphQL endpoint, so it can be run and tested within the development environment and used via  Maana CLI , its own exposed  GraphiQL , a standalone  GraphQL Playground , etc.  Dependent types and services are  imported  into the service  model  using a modified version of a technique from  graphql-import :  # import File, Url, MimeType from io.maana.core @PASSTHRU\n\ninput CrawlOptions {\n  url: Url\n  ...\n}\n\n\n...\n\n\ntype Mutation {\n  crawl(input: CrawlOptions): BotAction\n  ...\n}",
            "title": "Stage: Local Service (Standalone)"
        },
        {
            "location": "/developer/#stage-local-service-maana",
            "text": "In the previous stage, it is likely that various calls/services were stubbed or mocked because they required accessing a Maana cluster. It is now time to interact with a Maana deployment, typically one dedicated to development.  Communication to a Maana system requires the use of authentication. This is configured differently, based on the language/framework being used. Refer to the project template documentation used to scaffold the Knowledge service project.  The service being development must be registered with Maana. This is typically done programmatically using the Maana CLI by specifying a  manifest  that describes the service and its dependencies. For example:  {\n  id: \"io.maana.azure.crawler\",\n  name: \"Maana Azure Storage Crawler Service\",\n  dockerRegistry: null,\n  hostedUrl: null,\n}  The result of registering a new service with Maana is that CKG will generate a dedicated service endpoint for the new service, e.g.,  https://knowledge.acme.com/service/io.maana.azure.crawler:7331.  This enables the standalone service to communicate to Maana, but does not allow Maana to dispatch calls to the standalone service due to network connectivity restrictions. (This will be overcome in the next stages.)  The full GraphQL schema for a service manifest is:  # from io.maana.system\ntype ServiceManifest {\n  id: ID!\n  name: String\n  description: Text\n  registeredOn: DateTime\n  registeredBy: User\n  dockerRegistry: Url\n  hostedUrl: Url\n  modelSdl: String\n}",
            "title": "Stage: Local Service (Maana)"
        },
        {
            "location": "/developer/#stage-unmanaged-service",
            "text": "When it is time to have full participation in the Maana processing network, i.e., having its endpoint services consumed by other services, user interfaces, or automatically based on event subscription, then Maana's CKG must be able to communicate to the service. This means that the service must itself be deployed to a host that is accessible from the Maana cluster, e.g., Heroku, Azure, AWS, on-premise. In this configuration, the service owner is responsible for deploying, monitoring, scaling, securing, etc. the service, since Maana only has knowledge of a GraphQL endpoint URL and the schema it provides.  See the  Deploy to Heroku tutorial .",
            "title": "Stage: Unmanaged Service"
        },
        {
            "location": "/developer/#stage-managed-service",
            "text": "Maana can completely manage a  containerized  Knowledge Microservice/Bot, by specifying a Docker registry that the Maana deployment has access to (e.g., DockerHub, Azure). The following additional information is required when configuring a service to be managed by Maana:   scale stuff ??  ??  Andrey Batyuk",
            "title": "Stage: Managed Service"
        },
        {
            "location": "/developer/#debugging-a-knowledge-microservice",
            "text": "Andrey Batyuk",
            "title": "Debugging a Knowledge Microservice"
        },
        {
            "location": "/developer/#the-botaction-protocol",
            "text": "See  technical design note .",
            "title": "The BotAction Protocol"
        },
        {
            "location": "/developer/#knowledge-applications",
            "text": "Solution developers can develop knoweldge applications on top of the MAANA knwoledge graph.   who is the audience for the applications?  SME and are looking for answers to specific questions (i.e. Given a ship, a ship route and an omitted port, what re-route options can be considered to minimize trip duration for the loads onboard?)    what type of applications can be developed?  custom web apps, Power BI apps, Tableau, Spotfire? others?    what are the steps to build an application?  how does a developer publish and manage/share/update/delete an app?",
            "title": "Knowledge Applications"
        },
        {
            "location": "/developer/#development-environments",
            "text": "",
            "title": "Development Environments"
        },
        {
            "location": "/developer/#visual-studio-code",
            "text": "Most people run the  \"insiders\" edition  to have access to latest features.",
            "title": "Visual Studio Code"
        },
        {
            "location": "/developer/#command-line",
            "text": "Add VS Code to your path so you can invoke it from the command line  export PATH=\"$PATH:/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/bin\"  The 'code' command will now be available in your terminal.",
            "title": "Command Line"
        },
        {
            "location": "/developer/#recommended-plugins",
            "text": "code --install-extension PeterJausovec.vscode-docker\ncode --install-extension christian-kohler.npm-intellisense\ncode --install-extension christian-kohler.path-intellisense\ncode --install-extension dbaeumer.vscode-eslint\ncode --install-extension eamodio.gitlens\ncode --install-extension eg2.vscode-npm-script\ncode --install-extension esbenp.prettier-vscode\ncode --install-extension kumar-harsh.graphql-for-vscode\ncode --install-extension mikestead.dotenv\ncode --install-extension ms-azuretools.vscode-azurefunctions\ncode --install-extension ms-vscode.azure-account\ncode --install-extension msjsdiag.debugger-for-chrome\ncode --install-extension robertohuertasm.vscode-icons",
            "title": "Recommended Plugins"
        },
        {
            "location": "/developer/#settings",
            "text": "Access user settings from \"Code Insiders / Preferences / Settings\" and paste the following settings in the \"User Settings\" tab.  json\n{\n    \"workbench.iconTheme\": \"vscode-icons\",\n    \"workbench.colorTheme\": \"Default High Contrast\",\n    \"editor.fontFamily\": \"'Roboto Mono Light For Powerline', Menlo, Monaco, 'Courier New', italic\",\n    \"editor.formatOnSave\": true,\n    \"editor.tabSize\": 2,\n    \"editor.insertSpaces\": true,\n    \"eslint.autoFixOnSave\": true,\n    \"files.associations\": {\n        \"*.js\": \"javascriptreact\"\n    },\n    \"explorer.confirmDragAndDrop\": false,\n    \"explorer.confirmDelete\": false,\n    \"window.zoomLevel\": 0,\n    \"gitlens.advanced.messages\": {\n        \"suppressCommitHasNoPreviousCommitWarning\": false,\n        \"suppressCommitNotFoundWarning\": false,\n        \"suppressFileNotUnderSourceControlWarning\": false,\n        \"suppressGitVersionWarning\": false,\n        \"suppressLineUncommittedWarning\": false,\n        \"suppressNoRepositoryWarning\": false,\n        \"suppressUpdateNotice\": false,\n        \"suppressWelcomeNotice\": true\n    },\n    \"search.exclude\": {\n        \"**/node_modules\": true,\n        \"**/.git\": true\n    },\n    \"git.autofetch\": true\n}  Some of these are team style, some are personal preference (e.g., workbench.colorTheme).  Document generated by Confluence on Jul 25, 2018 06:05  Atlassian",
            "title": "Settings"
        },
        {
            "location": "/administrator/",
            "text": "Administrator Guide\n\n\nDeployment Prerequisites\n\n\nGeneral Prerequisites\n\n\nPrerequisites specific to cloud deployments\n\n\nPreparation of Azure infrastructure\n\n\nPrerequisites specific to on-prem deployments\n\n\nInstalling Maana platform3\n\n\nVM configuration3\n\n\nDocker Plugins installation3\n\n\nDocker Login\n\n\nDocker Deploy\n\n\nAdding users to the MAANA platform\n\n\nConnecting to an authentication provider\n\n\nCreating tenant groups\n\n\nAssigning users to a tenant group\n\n\nCreating and managing namespaces\n\n\nSystem monitoring and maintenance\n\n\nMonitoring, logging, reporting and alerts\n\n\nResizing cluster nodes\n\n\nAdding cluster nodes\n\n\nTenant resource allocation\n\n\nApplying system updates\n\n\nBackup & restore\n\n\nDisaster recovery\n\n\nManaging Maana services catalog\n\n\nTroubleshooting\n\n\n\u200b## Technical support",
            "title": "Administrator"
        },
        {
            "location": "/administrator/#administrator-guide",
            "text": "",
            "title": "Administrator Guide"
        },
        {
            "location": "/administrator/#deployment-prerequisites",
            "text": "",
            "title": "Deployment Prerequisites"
        },
        {
            "location": "/administrator/#general-prerequisites",
            "text": "",
            "title": "General Prerequisites"
        },
        {
            "location": "/administrator/#prerequisites-specific-to-cloud-deployments",
            "text": "",
            "title": "Prerequisites specific to cloud deployments"
        },
        {
            "location": "/administrator/#preparation-of-azure-infrastructure",
            "text": "",
            "title": "Preparation of Azure infrastructure"
        },
        {
            "location": "/administrator/#prerequisites-specific-to-on-prem-deployments",
            "text": "",
            "title": "Prerequisites specific to on-prem deployments"
        },
        {
            "location": "/administrator/#installing-maana-platform3",
            "text": "",
            "title": "Installing Maana platform3"
        },
        {
            "location": "/administrator/#vm-configuration3",
            "text": "",
            "title": "VM configuration3"
        },
        {
            "location": "/administrator/#docker-plugins-installation3",
            "text": "",
            "title": "Docker Plugins installation3"
        },
        {
            "location": "/administrator/#docker-login",
            "text": "",
            "title": "Docker Login"
        },
        {
            "location": "/administrator/#docker-deploy",
            "text": "",
            "title": "Docker Deploy"
        },
        {
            "location": "/administrator/#adding-users-to-the-maana-platform",
            "text": "",
            "title": "Adding users to the MAANA platform"
        },
        {
            "location": "/administrator/#connecting-to-an-authentication-provider",
            "text": "",
            "title": "Connecting to an authentication provider"
        },
        {
            "location": "/administrator/#creating-tenant-groups",
            "text": "",
            "title": "Creating tenant groups"
        },
        {
            "location": "/administrator/#assigning-users-to-a-tenant-group",
            "text": "",
            "title": "Assigning users to a tenant group"
        },
        {
            "location": "/administrator/#creating-and-managing-namespaces",
            "text": "",
            "title": "Creating and managing namespaces"
        },
        {
            "location": "/administrator/#system-monitoring-and-maintenance",
            "text": "",
            "title": "System monitoring and maintenance"
        },
        {
            "location": "/administrator/#monitoring-logging-reporting-and-alerts",
            "text": "",
            "title": "Monitoring, logging, reporting and alerts"
        },
        {
            "location": "/administrator/#resizing-cluster-nodes",
            "text": "",
            "title": "Resizing cluster nodes"
        },
        {
            "location": "/administrator/#adding-cluster-nodes",
            "text": "",
            "title": "Adding cluster nodes"
        },
        {
            "location": "/administrator/#tenant-resource-allocation",
            "text": "",
            "title": "Tenant resource allocation"
        },
        {
            "location": "/administrator/#applying-system-updates",
            "text": "",
            "title": "Applying system updates"
        },
        {
            "location": "/administrator/#backup-restore",
            "text": "",
            "title": "Backup &amp; restore"
        },
        {
            "location": "/administrator/#disaster-recovery",
            "text": "",
            "title": "Disaster recovery"
        },
        {
            "location": "/administrator/#managing-maana-services-catalog",
            "text": "",
            "title": "Managing Maana services catalog"
        },
        {
            "location": "/administrator/#troubleshooting",
            "text": "\u200b## Technical support",
            "title": "Troubleshooting"
        }
    ]
}